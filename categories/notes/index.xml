<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>notes on almo7aya.md</title><link>/categories/notes/</link><description>Recent content in notes on almo7aya.md</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Almo7aya</copyright><lastBuildDate>Sat, 06 Jun 2020 09:00:00 +0000</lastBuildDate><atom:link href="/categories/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Changes to String in java (from 1.7.0_06)</title><link>/posts/2020-06-06-changes-in-java-string/</link><pubDate>Sat, 06 Jun 2020 09:00:00 +0000</pubDate><guid>/posts/2020-06-06-changes-in-java-string/</guid><description>Before 1.7.0_06, String has 4 non static field:
char[] value int[] offset int count int hash Subing.substring create a String by sharing the original String&amp;rsquo;s internal char[] value and setting offset. This saves memory and makes String.substring run in a constant time($O(1)$). Meanwhile, this feature may cause memory leak1.
http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/java/lang/String.java
1public final class String 2 implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence 3{ 4 /** The value is used for character storage. */ 5 private final char value[]; 6 7 /** The offset is the first index of the storage that is used.</description></item><item><title>Racket notes</title><link>/posts/2020-02-29-racket/</link><pubDate>Sat, 29 Feb 2020 09:00:00 +0000</pubDate><guid>/posts/2020-02-29-racket/</guid><description>Basic 1#lang racket 2(provide (all-defined-out)) 3 4;this is a comment 5 6(define s &amp;#34;hello&amp;#34;) 7 8(define x 3) 9(define y (+ x 2)) 10 11(define cube1 12 (lambda (x) 13 (* x (* x x)))) 14 15(define cube2 16 (lambda (x) 17 (* x x x))) 18 19(define (cube3 x) 20 (* x x x)) 21 22(define (pow1 x y) 23 (if (=y 0) 24 1 25 (* x (pow1 x (- y 1))))) 26 27; currying 28(define pow2 29 (lambda (x) 30 (lambda (y) 31 (pow1 x y)))) List Empty list: null () doesn&amp;quot;t work for null but '() does build a list: (list e1 .</description></item><item><title>Standard ML notes</title><link>/posts/2019-12-30-standardml-notes/</link><pubDate>Mon, 30 Dec 2019 09:00:00 +0000</pubDate><guid>/posts/2019-12-30-standardml-notes/</guid><description>Basics Comments (* SML comment *) Variable bindings and Expressions val x = 34; (* static environment: x : int *) (* dynamic environment: x --&amp;gt; 34 *) val y = x + 1; (* Use tilde character instead of minus to reprsent negation *) val z = ~1; (* Integer Division *) val w = y div x Strings:
(* `\n`のようなエスケープシーケンスが利用できる *) val x = &amp;#34;hello\n&amp;#34;; (* 文字列の連結には&amp;#39;^&amp;#39;を使う *) val y = &amp;#34;hello &amp;#34; ^ &amp;#34;world&amp;#34;; An ML program is a sequence of bindings.</description></item><item><title>uipath ノート（三）- uipath orchestrator</title><link>/posts/2019-11-23-uipath-orchestrator/</link><pubDate>Sat, 23 Nov 2019 09:00:00 +0000</pubDate><guid>/posts/2019-11-23-uipath-orchestrator/</guid><description>利用手順 Official doc: https://docs.uipath.com/robot/docs/from-orchestrator-and-the-orchestrator-settings-window
マシンを追加 マシン側でマシン名とユーザ名を確認
C:\Users\user&amp;gt;hostname DESKTOP-ABCDE5F C:\Users\user&amp;gt;whoami desktop-abcde5f\user C:\Users\user&amp;gt; 追加完了後、マシンキーを取得する。
ロボットを登録 Type: studio (開発用？) Domain/Username: 上記のユーザ名 ローカルのorchestrator設定 Uipath Robotを開き⇒orchestratorの設定で、上記のマシンキーを入力する。 orchestrator URLに https://platform.uipath.com/ を入力する. Invalid machine keyというエラーが出たら、下記のようなURLを試す：
https://platform.uipath.com/&amp;lt;account name&amp;gt;/&amp;lt;service name&amp;gt; 参照：Uipath orchestrator error : invalid machine key
ロボットグループ(Environment)作成 プロジェクトをパブリッシュ(Publish) プロセスを追加 Automations　⇒　Processes
ジョブ(Jobs)の実行 Monitoring　⇒　Jobs
その他 再パブリッシュすると、Processが最新バージョンを使うため、変更作業が必要 Processes　⇒　More Options　⇒　View Process　⇒　最新のバージョンに切り替える
ジョブの停止 停止(Stop)：必ずワークフロー内で「停止すべきか確認(Should Stop)」アクティビティを使用する 強制終了(Kill)：処理中の内容に関わらず、ジョブを停止する アクティブなジョブは削除できない パラメーター変更の優先順位 ジョブ (Jobs) -&amp;gt; プロセス (Processes) -&amp;gt; パッケージ(UiPath Studio)</description></item><item><title>uipath ノート（二）- Best Practice</title><link>/posts/2019-11-18-uipath-best-practice/</link><pubDate>Mon, 18 Nov 2019 09:00:00 +0000</pubDate><guid>/posts/2019-11-18-uipath-best-practice/</guid><description>時間をかけて各ワークフローに適したレイアウトを選択しましょう。 メイン: フローチャートまたはステートマシン
ビジネスロジック: フローチャート
UI インタラクション: シーケンス
フローチャートを使用することで、入れ子状の IF を回避
プロセスを小さなワークフローに分割しましょう。 分割したものを個別に開発、テスト
ワークフローの再利用
分割ファイルで作業することによる、より効率的な共同作業
必ず例外を処理しましょう。 例外が発生しやすいワークフローを [Try Catch (トライキャッチ)] ブロックに配置
外部から呼び出されたワークフローでも同様
リカバリシーケンスの設定
ワークフローを読みやすいものにしましょう。 すべてのコンポーネントにわかりやすい名前を選択
注記やコメントの使用
リアルタイムの実行状況のログ取得
環境設定を Config ファイルに格納
不要になったアプリケーションを終了させることで、常にクリーンな状態を維持しましょう。</description></item><item><title>JavaScript URI エンコーディング</title><link>/posts/2019-11-10-encodeuricomponent/</link><pubDate>Sun, 10 Nov 2019 09:00:00 +0000</pubDate><guid>/posts/2019-11-10-encodeuricomponent/</guid><description>まとめ encodeURI()とencodeURIComponent()はRFC 2396準拠である。 encodeURI() は完全な URI を表すのに必要な文字 (Reserved Characters) はエンコードしません。 また、予約されていないが &amp;ldquo;そのまま&amp;rdquo; URI に使用できる(Unreserved Marks) 文字をエンコードしません。 encodeURIComponent() は &amp;ldquo;Unreserved Marks&amp;rdquo; 文字をエンコードしません。
1var set1 = &amp;#34;;,/?:@&amp;amp;=+$#&amp;#34;; // Reserved Characters 2var set2 = &amp;#34;-_.!~*&amp;#39;()&amp;#34;; // Unreserved Marks 3 4console.log(encodeURI(set1)); // ;,/?:@&amp;amp;=+$ 5console.log(encodeURI(set2)); // -_.!~*&amp;#39;() 6 7console.log(encodeURIComponent(set1)); // %3B%2C%2F%3F%3A%40%26%3D%2B%24 8console.log(encodeURIComponent(set2)); // -_.!~*&amp;#39;() rfc2396 appendix-A https://tools.ietf.org/html/rfc2396#appendix-A
URI-reference = [ absoluteURI | relativeURI ] [ &amp;#34;#&amp;#34; fragment ] absoluteURI = scheme &amp;#34;:&amp;#34; ( hier_part | opaque_part ) relativeURI = ( net_path | abs_path | rel_path ) [ &amp;#34;?</description></item><item><title>uipath ノート（一）</title><link>/posts/2019-10-27-uipath/</link><pubDate>Sun, 27 Oct 2019 09:00:00 +0000</pubDate><guid>/posts/2019-10-27-uipath/</guid><description>変数 Int32 String Boolean GenericValue　参照 UiPath Studio には GenericValue 変数の自動変換メカニズムがあり、式を正しく定義することで、目的の結果を得ることができます。式の最初の要素は、Studio から操作するガイドラインとして使用されることを考慮してください。例えば、2 つの GenericValue 変数を追加し、式の最初の変数が String として定義されてた場合、最初に代入された値を元に 2 つの値を結合し、文字列となります。 Integer として定義した場合の結果は、合計の値となります。
Array DataTime DataTable .Net 変数型を参照して探す方法
アクティビティ レイアウトダイアグラム シーエンス：　より高度で複雑な自動化に向こう フローチャート：　シンプルな自動化プロジェクトに適している ステートマシン Global Exception Handler (グローバル例外ハンドラー) 参照：https://docs.uipath.com/studio/lang-ja/docs/workflow-design
選択肢 条件分岐(If)：　シーケンス用条件分岐 フロー条件分岐(flow desicion)：　フローチャート用条件分岐 フロースイッチ (Flow Switch) 繰り返し 繰り返し（前判定）(While) 繰り返し（後判定）(Do While) 繰り返し（コレクションの各要素）(For Each) データ操作 CSVを読み込み(Read CSV) オプションにエンコーディングを指定できる（日本語データがある場合、&amp;quot;SHIFT-JIS&amp;quot;を指定する） 列名を含める(IncludeColumnNames)を指定できる 出力タイプ：System.Data.DataTable Microsoft Docs Selectメソッドで半角スペースを含む列名で指定する場合、半角スペースが特殊文字ではなく文字列として認識されるため、[]で列名を囲う Names.Select(&amp;#34;[メンバー ステータス] = &amp;#39;Yes&amp;#39;&amp;#34;) その他 メッセージボックス 代入(assign) 待機 (Delay) 入力ダイアログ（input dialog）: フォルダーを選択(Select Folder) 一行を書き込み(Write Line)：　Debug用？ アプリケーションを開く(Open Application) ブラウザを開く(Open Browser) ブラウザーにアタッチ(Attach Browser) 文字を入力(Type Into) ハイライト(Highlight) アンカーベース(Anchor Base) スクリーンショットをと撮る(Take Screenshot) 要素の有無を検出(Element Exists) 要素の消滅を待つ(Wait Element Vanish) レコーディング機能 [○]レコーディング可</description></item></channel></rss>