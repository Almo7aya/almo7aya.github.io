<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on almo7aya.md</title><link>/posts/</link><description>Recent content in Posts on almo7aya.md</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Almo7aya</copyright><lastBuildDate>Tue, 27 Sep 2022 22:31:52 +0300</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>My First Post</title><link>/posts/my-first-post/</link><pubDate>Tue, 27 Sep 2022 22:31:52 +0300</pubDate><guid>/posts/my-first-post/</guid><description>this is a test for md</description></item><item><title>Code Block Test</title><link>/posts/code-block-test/</link><pubDate>Sun, 27 Jun 2021 09:00:00 +0000</pubDate><guid>/posts/code-block-test/</guid><description>String
Using indents:
text text text Fenced code block:
text text &amp;lt;tag&amp;gt; Fenced code block with language (lineNumbersInTable = false):
1// JavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJava 2public final class String 3 implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence 4{ 5 /** The value is used for character storage. */ 6 private final char value[]; 7 8 /** The offset is the first index of the storage that is used. */ 9 private final int offset; 10 11 /** The count is the number of characters in the String.</description></item><item><title>Changes to String in java (from 1.7.0_06)</title><link>/posts/2020-06-06-changes-in-java-string/</link><pubDate>Sat, 06 Jun 2020 09:00:00 +0000</pubDate><guid>/posts/2020-06-06-changes-in-java-string/</guid><description>Before 1.7.0_06, String has 4 non static field:
char[] value int[] offset int count int hash Subing.substring create a String by sharing the original String&amp;rsquo;s internal char[] value and setting offset. This saves memory and makes String.substring run in a constant time($O(1)$). Meanwhile, this feature may cause memory leak1.
http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/java/lang/String.java
1public final class String 2 implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence 3{ 4 /** The value is used for character storage. */ 5 private final char value[]; 6 7 /** The offset is the first index of the storage that is used.</description></item><item><title>Algorithms - Graphs</title><link>/posts/2020-05-01-algorithms-graphs/</link><pubDate>Fri, 01 May 2020 09:00:00 +0000</pubDate><guid>/posts/2020-05-01-algorithms-graphs/</guid><description>Undirected Graphs Some problems Path Shortest path Cycle Ehler tour: A cycle that uses each edge excatly once. Hamilton tour: A cycle that uses each vertex exactly once classical NP-complete problem. Connectivity MST: Biconnectivity: A vertex whose removal disconnects the graph Planarity Graph isomorphism: Are two graphs identical? No one knows so far. A lonstanding open problem Representations Real-world graphs tend to be sparse (huge number of vertices, small average vertex degree).</description></item><item><title>Programming Language - Subtyping</title><link>/posts/2020-04-29-subtyping/</link><pubDate>Wed, 29 Apr 2020 09:00:00 +0000</pubDate><guid>/posts/2020-04-29-subtyping/</guid><description>Some Good Subtyping Rules Width subtyping: A supertype can have a subset of fields with the same types, i.e., a subtype can have extra fields. Permutation subtypings: A supertype can have the same set of fields with the same types in a different order. Transitivity: if t1 is subtype of t2, and t2 is subtype of t3, then t1 is subtype of t3. Reflexivity: Every type is a subtype of itself.</description></item><item><title>Racket notes</title><link>/posts/2020-02-29-racket/</link><pubDate>Sat, 29 Feb 2020 09:00:00 +0000</pubDate><guid>/posts/2020-02-29-racket/</guid><description>Basic 1#lang racket 2(provide (all-defined-out)) 3 4;this is a comment 5 6(define s &amp;#34;hello&amp;#34;) 7 8(define x 3) 9(define y (+ x 2)) 10 11(define cube1 12 (lambda (x) 13 (* x (* x x)))) 14 15(define cube2 16 (lambda (x) 17 (* x x x))) 18 19(define (cube3 x) 20 (* x x x)) 21 22(define (pow1 x y) 23 (if (=y 0) 24 1 25 (* x (pow1 x (- y 1))))) 26 27; currying 28(define pow2 29 (lambda (x) 30 (lambda (y) 31 (pow1 x y)))) List Empty list: null () doesn&amp;quot;t work for null but '() does build a list: (list e1 .</description></item><item><title>Standard ML notes</title><link>/posts/2019-12-30-standardml-notes/</link><pubDate>Mon, 30 Dec 2019 09:00:00 +0000</pubDate><guid>/posts/2019-12-30-standardml-notes/</guid><description>Basics Comments (* SML comment *) Variable bindings and Expressions val x = 34; (* static environment: x : int *) (* dynamic environment: x --&amp;gt; 34 *) val y = x + 1; (* Use tilde character instead of minus to reprsent negation *) val z = ~1; (* Integer Division *) val w = y div x Strings:
(* `\n`のようなエスケープシーケンスが利用できる *) val x = &amp;#34;hello\n&amp;#34;; (* 文字列の連結には&amp;#39;^&amp;#39;を使う *) val y = &amp;#34;hello &amp;#34; ^ &amp;#34;world&amp;#34;; An ML program is a sequence of bindings.</description></item><item><title>uipath ノート（三）- uipath orchestrator</title><link>/posts/2019-11-23-uipath-orchestrator/</link><pubDate>Sat, 23 Nov 2019 09:00:00 +0000</pubDate><guid>/posts/2019-11-23-uipath-orchestrator/</guid><description>利用手順 Official doc: https://docs.uipath.com/robot/docs/from-orchestrator-and-the-orchestrator-settings-window
マシンを追加 マシン側でマシン名とユーザ名を確認
C:\Users\user&amp;gt;hostname DESKTOP-ABCDE5F C:\Users\user&amp;gt;whoami desktop-abcde5f\user C:\Users\user&amp;gt; 追加完了後、マシンキーを取得する。
ロボットを登録 Type: studio (開発用？) Domain/Username: 上記のユーザ名 ローカルのorchestrator設定 Uipath Robotを開き⇒orchestratorの設定で、上記のマシンキーを入力する。 orchestrator URLに https://platform.uipath.com/ を入力する. Invalid machine keyというエラーが出たら、下記のようなURLを試す：
https://platform.uipath.com/&amp;lt;account name&amp;gt;/&amp;lt;service name&amp;gt; 参照：Uipath orchestrator error : invalid machine key
ロボットグループ(Environment)作成 プロジェクトをパブリッシュ(Publish) プロセスを追加 Automations　⇒　Processes
ジョブ(Jobs)の実行 Monitoring　⇒　Jobs
その他 再パブリッシュすると、Processが最新バージョンを使うため、変更作業が必要 Processes　⇒　More Options　⇒　View Process　⇒　最新のバージョンに切り替える
ジョブの停止 停止(Stop)：必ずワークフロー内で「停止すべきか確認(Should Stop)」アクティビティを使用する 強制終了(Kill)：処理中の内容に関わらず、ジョブを停止する アクティブなジョブは削除できない パラメーター変更の優先順位 ジョブ (Jobs) -&amp;gt; プロセス (Processes) -&amp;gt; パッケージ(UiPath Studio)</description></item><item><title>uipath ノート（二）- Best Practice</title><link>/posts/2019-11-18-uipath-best-practice/</link><pubDate>Mon, 18 Nov 2019 09:00:00 +0000</pubDate><guid>/posts/2019-11-18-uipath-best-practice/</guid><description>時間をかけて各ワークフローに適したレイアウトを選択しましょう。 メイン: フローチャートまたはステートマシン
ビジネスロジック: フローチャート
UI インタラクション: シーケンス
フローチャートを使用することで、入れ子状の IF を回避
プロセスを小さなワークフローに分割しましょう。 分割したものを個別に開発、テスト
ワークフローの再利用
分割ファイルで作業することによる、より効率的な共同作業
必ず例外を処理しましょう。 例外が発生しやすいワークフローを [Try Catch (トライキャッチ)] ブロックに配置
外部から呼び出されたワークフローでも同様
リカバリシーケンスの設定
ワークフローを読みやすいものにしましょう。 すべてのコンポーネントにわかりやすい名前を選択
注記やコメントの使用
リアルタイムの実行状況のログ取得
環境設定を Config ファイルに格納
不要になったアプリケーションを終了させることで、常にクリーンな状態を維持しましょう。</description></item><item><title>JavaScript URI エンコーディング</title><link>/posts/2019-11-10-encodeuricomponent/</link><pubDate>Sun, 10 Nov 2019 09:00:00 +0000</pubDate><guid>/posts/2019-11-10-encodeuricomponent/</guid><description>まとめ encodeURI()とencodeURIComponent()はRFC 2396準拠である。 encodeURI() は完全な URI を表すのに必要な文字 (Reserved Characters) はエンコードしません。 また、予約されていないが &amp;ldquo;そのまま&amp;rdquo; URI に使用できる(Unreserved Marks) 文字をエンコードしません。 encodeURIComponent() は &amp;ldquo;Unreserved Marks&amp;rdquo; 文字をエンコードしません。
1var set1 = &amp;#34;;,/?:@&amp;amp;=+$#&amp;#34;; // Reserved Characters 2var set2 = &amp;#34;-_.!~*&amp;#39;()&amp;#34;; // Unreserved Marks 3 4console.log(encodeURI(set1)); // ;,/?:@&amp;amp;=+$ 5console.log(encodeURI(set2)); // -_.!~*&amp;#39;() 6 7console.log(encodeURIComponent(set1)); // %3B%2C%2F%3F%3A%40%26%3D%2B%24 8console.log(encodeURIComponent(set2)); // -_.!~*&amp;#39;() rfc2396 appendix-A https://tools.ietf.org/html/rfc2396#appendix-A
URI-reference = [ absoluteURI | relativeURI ] [ &amp;#34;#&amp;#34; fragment ] absoluteURI = scheme &amp;#34;:&amp;#34; ( hier_part | opaque_part ) relativeURI = ( net_path | abs_path | rel_path ) [ &amp;#34;?</description></item><item><title>uipath ノート（一）</title><link>/posts/2019-10-27-uipath/</link><pubDate>Sun, 27 Oct 2019 09:00:00 +0000</pubDate><guid>/posts/2019-10-27-uipath/</guid><description>変数 Int32 String Boolean GenericValue　参照 UiPath Studio には GenericValue 変数の自動変換メカニズムがあり、式を正しく定義することで、目的の結果を得ることができます。式の最初の要素は、Studio から操作するガイドラインとして使用されることを考慮してください。例えば、2 つの GenericValue 変数を追加し、式の最初の変数が String として定義されてた場合、最初に代入された値を元に 2 つの値を結合し、文字列となります。 Integer として定義した場合の結果は、合計の値となります。
Array DataTime DataTable .Net 変数型を参照して探す方法
アクティビティ レイアウトダイアグラム シーエンス：　より高度で複雑な自動化に向こう フローチャート：　シンプルな自動化プロジェクトに適している ステートマシン Global Exception Handler (グローバル例外ハンドラー) 参照：https://docs.uipath.com/studio/lang-ja/docs/workflow-design
選択肢 条件分岐(If)：　シーケンス用条件分岐 フロー条件分岐(flow desicion)：　フローチャート用条件分岐 フロースイッチ (Flow Switch) 繰り返し 繰り返し（前判定）(While) 繰り返し（後判定）(Do While) 繰り返し（コレクションの各要素）(For Each) データ操作 CSVを読み込み(Read CSV) オプションにエンコーディングを指定できる（日本語データがある場合、&amp;quot;SHIFT-JIS&amp;quot;を指定する） 列名を含める(IncludeColumnNames)を指定できる 出力タイプ：System.Data.DataTable Microsoft Docs Selectメソッドで半角スペースを含む列名で指定する場合、半角スペースが特殊文字ではなく文字列として認識されるため、[]で列名を囲う Names.Select(&amp;#34;[メンバー ステータス] = &amp;#39;Yes&amp;#39;&amp;#34;) その他 メッセージボックス 代入(assign) 待機 (Delay) 入力ダイアログ（input dialog）: フォルダーを選択(Select Folder) 一行を書き込み(Write Line)：　Debug用？ アプリケーションを開く(Open Application) ブラウザを開く(Open Browser) ブラウザーにアタッチ(Attach Browser) 文字を入力(Type Into) ハイライト(Highlight) アンカーベース(Anchor Base) スクリーンショットをと撮る(Take Screenshot) 要素の有無を検出(Element Exists) 要素の消滅を待つ(Wait Element Vanish) レコーディング機能 [○]レコーディング可</description></item><item><title>JavaScript Comparison operation at a glance</title><link>/posts/2019-03-28-javascript-comparison/</link><pubDate>Thu, 28 Mar 2019 09:00:00 +0000</pubDate><guid>/posts/2019-03-28-javascript-comparison/</guid><description>When given a scenario like:
1console.log(null &amp;gt; -1) //true It produces true, which makes me think null is treated as 0. But when I run:
1console.log(null == 0) // false 2console.log(null &amp;gt; 0) // false 3console.log(null &amp;lt; 0) // false They all output false!
I googled a lot and finally found answers in Ecma-262 Specification.
The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows:</description></item><item><title>Js tips I can't remember</title><link>/posts/2019-03-22-js-tips/</link><pubDate>Fri, 22 Mar 2019 09:00:00 +0000</pubDate><guid>/posts/2019-03-22-js-tips/</guid><description>&lt;h2 id="__proto__-vs-prototype">&lt;code>__proto__&lt;/code> VS &lt;code>prototype&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>__proto__&lt;/code> is the actual object that is used in the lookup chain to resolve methods and others. &lt;code>prototype&lt;/code> is the object that is used to build &lt;code>__proto__&lt;/code> when creating an object with &lt;code>new&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The &amp;ldquo;cool kids&amp;rdquo; in JavaScript would generally pronounce &lt;code>__proto__&lt;/code> as &amp;ldquo;&lt;strong>dunder proto&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript">https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>( &lt;span style="color:#fe8019">new&lt;/span> Foo ).__proto__ &lt;span style="color:#fe8019">===&lt;/span> Foo.prototype; &lt;span style="color:#928374;font-style:italic">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic">&lt;/span>( &lt;span style="color:#fe8019">new&lt;/span> Foo ).prototype &lt;span style="color:#fe8019">===&lt;/span> &lt;span style="color:#fe8019">undefined&lt;/span>; &lt;span style="color:#928374;font-style:italic">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Bind specific arguments of a function</title><link>/posts/2019-03-08-es6-bind-trick/</link><pubDate>Fri, 08 Mar 2019 09:00:00 +0000</pubDate><guid>/posts/2019-03-08-es6-bind-trick/</guid><description>To bind specific (nth) arguments of a function, we can write a decorator instead of using Function.bind():
1function func(p1, p2, p3) { 2 console.log(p1, p2, p3); 3} 4// the binding starts after however many are passed in. 5function decorator(...bound_args) { 6 return function(...args) { 7 return func(...args, ...bound_args); 8 }; 9} 10 11// bind the last parameter 12let f = decorator(&amp;#34;3&amp;#34;); 13f(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;); // a b 3 14 15// bind the last two parameter 16let f2 = decorator(&amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;) 17f2(&amp;#34;a&amp;#34;); // a 2 3 Even if we want to bind just the nth argument, we can do as follows:</description></item><item><title>Object.assign() with accessor descriptor</title><link>/posts/2019-03-08-object-assign-with-accessor-descriptor/</link><pubDate>Fri, 08 Mar 2019 09:00:00 +0000</pubDate><guid>/posts/2019-03-08-object-assign-with-accessor-descriptor/</guid><description>&lt;p>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Copying_accessors">MDN docs:&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>The Object.assign() method only copies enumerable and own properties from a source object to a target object. It uses [[Get]] on the source and [[Set]] on the target, so it will invoke getters and setters. Therefore it assigns properties versus just copying or defining new properties. This may make it unsuitable for merging new properties into a prototype if the merge sources contain getters.&lt;/p>
&lt;/blockquote>
&lt;p>For example&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 1&lt;/span>&lt;span>&lt;span style="color:#fe8019">class&lt;/span> Cat {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 2&lt;/span>&lt;span> constructor(name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 3&lt;/span>&lt;span> &lt;span style="color:#fe8019">this&lt;/span>._name &lt;span style="color:#fe8019">=&lt;/span> name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 4&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 6&lt;/span>&lt;span> get name() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 7&lt;/span>&lt;span> &lt;span style="color:#fe8019">return&lt;/span> &lt;span style="color:#fe8019">this&lt;/span>._name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59"> 9&lt;/span>&lt;span> set name(value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">10&lt;/span>&lt;span> &lt;span style="color:#fe8019">this&lt;/span>._name &lt;span style="color:#fe8019">=&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">11&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">12&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">14&lt;/span>&lt;span>&lt;span style="color:#fe8019">let&lt;/span> nyannko &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#fe8019">new&lt;/span> Cat(&lt;span style="color:#b8bb26">&amp;#34;nyannko&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">15&lt;/span>&lt;span>&lt;span style="color:#fe8019">let&lt;/span> copy &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#fabd2f">Object&lt;/span>.assign({}, nyannko)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">17&lt;/span>&lt;span>console.log(nyannko.name) &lt;span style="color:#928374;font-style:italic">// nyannko
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">18&lt;/span>&lt;span>&lt;span style="color:#928374;font-style:italic">&lt;/span>console.log(copy.name) &lt;span style="color:#928374;font-style:italic">// undefined
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>name&lt;/code> property is lost.&lt;/p></description></item><item><title>VueのNavigation Guards</title><link>/posts/2019-01-19-vue-navigation-guards/</link><pubDate>Fri, 25 Jan 2019 09:00:00 +0000</pubDate><guid>/posts/2019-01-19-vue-navigation-guards/</guid><description>Navigation guards are provided by vue-router. Three ways to hook:
globally per-route in-component NOTE:
Params or query changes won&amp;rsquo;t trigger enter/leave navigation guards. You can either watch the $route object to react to those changes, or use the beforeRouteUpdate in-component guard. Make sure to always call the next function, otherwise the hook will never be resolved. Global 1const router = new VueRouter({ ... }) 2 3// Before Guards 4router.beforeEach((to, from, next) =&amp;gt; { 5 // .</description></item><item><title>ES6について</title><link>/posts/2019-01-18-es6/</link><pubDate>Fri, 18 Jan 2019 16:00:00 +0000</pubDate><guid>/posts/2019-01-18-es6/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;a href="https://github.com/lukehoban/es6features#readme">https://github.com/lukehoban/es6features#readme&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://help.wtf/es6">http://help.wtf/es6&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://es6-features.org">http://es6-features.org&lt;/a>&lt;/p>
&lt;h2 id="string">String&lt;/h2>
&lt;h3 id="stringx-is-deprecated-use-stringprototypex-instead">String.x is deprecated; use String.prototype.x instead.&lt;/h3>
&lt;p>非推奨の構文:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>&lt;span style="color:#fe8019">var&lt;/span> num &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">15&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>&lt;span style="color:#fabd2f">String&lt;/span>.replace(num, &lt;span style="color:#b8bb26">/5/&lt;/span>, &lt;span style="color:#b8bb26">&amp;#39;2&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>標準の構文:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>&lt;span style="color:#fe8019">var&lt;/span> num &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#d3869b">15&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2&lt;/span>&lt;span>&lt;span style="color:#fabd2f">String&lt;/span>(num).replace(&lt;span style="color:#b8bb26">/5/&lt;/span>, &lt;span style="color:#b8bb26">&amp;#39;2&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="template-literal">Template literal&lt;/h3>
&lt;p>Nesting templates:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1&lt;/span>&lt;span>&lt;span style="color:#fe8019">const&lt;/span> classes &lt;span style="color:#fe8019">=&lt;/span> &lt;span style="color:#b8bb26">`header &lt;/span>&lt;span style="color:#b8bb26">${&lt;/span> isLargeScreen() &lt;span style="color:#fe8019">?&lt;/span> &lt;span style="color:#b8bb26">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#fe8019">:&lt;/span> &lt;span style="color:#b8bb26">`icon-&lt;/span>&lt;span style="color:#b8bb26">${&lt;/span>item.isCollapsed &lt;span style="color:#fe8019">?&lt;/span> &lt;span style="color:#b8bb26">&amp;#39;expander&amp;#39;&lt;/span> &lt;span style="color:#fe8019">:&lt;/span> &lt;span style="color:#b8bb26">&amp;#39;collapser&amp;#39;&lt;/span>&lt;span style="color:#b8bb26">}&lt;/span>&lt;span style="color:#b8bb26">`&lt;/span> &lt;span style="color:#b8bb26">}&lt;/span>&lt;span style="color:#b8bb26">`&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>java散列知识点总结</title><link>/posts/2017-02-18-hash/</link><pubDate>Sat, 18 Feb 2017 19:19:01 +0000</pubDate><guid>/posts/2017-02-18-hash/</guid><description>java 的根类 Object 具有 hashcode 方法。当 equal 方法被重写时也应当重写 hashcode 方法。
基本数据类型的散列码 byte short int char 类型的搜索键将会转换为 int。 float 类型的搜索键使用 Float.floatToIntBits(key) 作为散列码。 long 类型的搜索键会进行折叠操作，如下： 1iny hashCode = (int) (key ^ (key &amp;gt;&amp;gt; 32)); double 类型的搜索键会使用 Double.doubleToLongBits(key) 方法转换为 long 类型然后再进行折叠。 字符串类型的散列码 对于字符串一般使用多项式散列码进行计算，
这里放个公式的图
b的较好取值为31，33，37，39，41。在 java String 类中 b 取31。
1public static int hash(String key, int tableSize) 2{ 3 int hashVal = 0; 4 5 for (int i = 0; i &amp;lt; key.length(); i++) 6 hashVal = 37*hashVal + key.</description></item><item><title>php的闭包特性</title><link>/posts/2017-01-11-php-lambada/</link><pubDate>Wed, 11 Jan 2017 18:39:17 +0000</pubDate><guid>/posts/2017-01-11-php-lambada/</guid><description>闭包和匿名函数在PHP 5.3.0引入，并且PHP将两者视为相同的概念。闭包其实是伪装成函数的对象，它的实质其实是Closure实例。
创建闭包非常简单：
1$c = function($name) { 2 return sprintf(&amp;#34;Hello World! Hello %s!&amp;#34;, $name); 3}; 4 5echo $c(&amp;#39;PHP&amp;#39;); 使用use对闭包附加状态，多个参数使用,分隔：
1function callPerson($name) { 2 return function($about) use ($name) { 3 return sprintf(&amp;#34;%s, %s&amp;#34;, $name, $about); 4 } 5} 6 7$triver = callPerson(&amp;#39;Triver&amp;#39;); 8echo $triver(&amp;#34;slow down, please!!&amp;#34;); 附加的变量会被封装到闭包内，即使返回的闭包队形已经跳出了callPerson()的作用域也仍然会记住$name的值。
闭包有一个有趣的bindTo()方法，可以将闭包的内部状态绑定到其他对象上，第二个参数指定了绑定闭包的对象所属的类，从而实现在闭包中访问绑定对象的私有方法和属性。
1class Bind { 2 protected $name = &amp;#39;no name&amp;#39;; 3 public $change; 4 5 public function addAction($action) { 6 $this-&amp;gt;change = $action-&amp;gt;bindTo($this, __CLASS__); 7 } 8} 9 10$bind = new Bind(); 11$bind-&amp;gt;addAction(function() { 12 $this-&amp;gt;name = &amp;#34;php&amp;#34;; 13 return $this-&amp;gt;name; 14 }); 15 16$change = $bind-&amp;gt;change; 17echo $change(); 使用这个特性可以方便的为类添加方法并绑定：</description></item><item><title>ruby学习笔记</title><link>/posts/2016-12-08-ruby-notes/</link><pubDate>Thu, 08 Dec 2016 22:54:49 +0000</pubDate><guid>/posts/2016-12-08-ruby-notes/</guid><description>regular expressions =~是用于正则表达式的匹配操作符。返回匹配到的字符串位置或nil。
1&amp;#34;abcdef&amp;#34; =~ /d/ # return 3 2&amp;#34;aaaaaa&amp;#34; =~ /d/ # return nil !和? The exclamation point (!, sometimes pronounced aloud as &amp;ldquo;bang!&amp;rdquo;) indicates something potentially destructive, that is to say, something that can change the value of what it touches.
ruby&amp;gt; s1 = &amp;#34;forth&amp;#34; &amp;#34;forth&amp;#34; ruby&amp;gt; s1.chop! # This changes s1. &amp;#34;fort&amp;#34; ruby&amp;gt; s2 = s1.chop # This puts a changed copy in s2, &amp;#34;for&amp;#34; ruby&amp;gt; s1 # .</description></item><item><title>netfilter/iptables 笔记</title><link>/posts/2016-11-29-iptables-usage/</link><pubDate>Tue, 29 Nov 2016 21:08:52 +0000</pubDate><guid>/posts/2016-11-29-iptables-usage/</guid><description>netfilter 与 iptables netfilter是linux默认的防火墙，在2.4之后的版本正式进入内核。netfilter 使用四个表(Table)来存放控制信息包过滤处理的规则集。每张表由链(Chain)组成，每条链又包含了多条规则(rule)。
iptables是用来编辑操作这些表的一个工具。iptables包中也包含了针对IPv6的工具ip6tables。
四个表及其包含的链：
filter INPUT FORWARD OUTPUT nat PREROUTING POSTROUTING OUTPUT mangle PREROUTING INPUT FORWARD OUTPUT POSTROUTING raw PREROUTING OUTPUT filter机制 filter是netfilter中最重要的机制，其任务是执行数据包的过滤操作。具有三种内建链：
INPUT - 来自外部的数据包（访问本机） OUTPUT - 发往外部的数据包（本机访问外部） FORWORD - “路过”本机的数据包，转发到其他设备 链中规则的匹配方式遵循first match。filter会根据数据包特征从相应链中的第一条规则开始逐一进行匹配。只要遇到满足特征的规则后便不再继续。 每条链在最底端都定义了默认规则。默认规则只会有一种状态：ACCEPT或者DROP。默认为ACCEPT。
iptables命令参数 格式：
iptables -操作方式 [链名] [条件匹配] [选项] iptables -[ACD] chain rule-specification [options] iptables -I chain [rulenum] rule-specification [options] iptables -R chain rulenum rule-specification [options] iptables -D chain rulenum [options] iptables -[LS] [chain [rulenum]] [options] iptables -[FZ] [chain] [options] iptables -[NX] chain iptables -E old-chain-name new-chain-name iptables -P chain target [options] iptables -h (print this help information) 常用操作方式：</description></item><item><title>composer中的autoload</title><link>/posts/2016-11-05-php-composer-autoload/</link><pubDate>Sat, 05 Nov 2016 02:42:06 +0000</pubDate><guid>/posts/2016-11-05-php-composer-autoload/</guid><description>composer的autoload可以轻松的实现php的自动加载。在composer.json中添加autoload字段即可。当前支持 PSR-0 PSR-4 classmap解析和files包含。官方推荐PSR-4标准（添加类时不需要重新生成加载器）。
PSR-4 Under the psr-4 key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like Foo\\Bar\\Baz a namespace prefix Foo\\ pointing to a directory src/ means that the autoloader will look for a file named src/Bar/Baz.php and include it if present. Note that as opposed to the older PSR-0 style, the prefix (Foo\\) is not present in the file path.</description></item><item><title>幸せ</title><link>/posts/2016-10-22-z/</link><pubDate>Sat, 22 Oct 2016 16:56:54 +0000</pubDate><guid>/posts/2016-10-22-z/</guid><description>:-)
Look at the stars
抬头仰望满天繁星
Look how they shine for you
看它们为你绽放着 闪烁不息
And everything you do
而你的一颦一举
Yeah&amp;rsquo; they were all Yellow
却满含胆怯和羞意
I came along
我追随着你的气息
I wrote a song for you
为你写下一首歌曲
And all the things you do
回想着你的所有举动和笑意
it was called Yellow
并用Yellow为这首歌命名
So then I took my turn
我耗尽心力
Oh what a thing to have done
用行动表达我的爱意
And it was all Yellow
噢这过程充满不安羞怯和点滴暖意
Your skin</description></item><item><title/><link>/posts/testpost/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/posts/testpost/</guid><description/></item></channel></rss>